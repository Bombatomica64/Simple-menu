generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Logo {
  id          Int      @id @default(autoincrement())
  name        String   // Name/description of the logo
  imageUrl    String   // URL to the logo image file
  position    String   @default("top-left") // "top-left", "top-center", "top-right", "bottom-left", "bottom-center", "bottom-right"
  size        String   @default("medium") // "small", "medium", "large", "extra-large"
  opacity     Float    @default(1.0) // 0.0 to 1.0 for transparency
  isActive    Boolean  @default(true) // Whether this logo is currently active
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationship - Multiple menus can use the same logo
  menus       Menu[]
}

model Menu {
  id                        Int               @id @default(autoincrement())
  createdAt                 DateTime          @default(now())
  backgroundId              Int?              // Optional FK to BackgroundConfig
  background                BackgroundConfig? @relation(fields: [backgroundId], references: [id], onDelete: SetNull)
  logoId                    Int?              // Optional FK to Logo
  logo                      Logo?             @relation(fields: [logoId], references: [id], onDelete: SetNull)
  orientation               String            @default("vertical") // "vertical" or "horizontal" layout
  availableImages           String?           // JSON string of available images for menu items
    // Global display preferences for pasta types
  globalPastaTypeShowImage       Boolean  @default(true)
  globalPastaTypeImageSize       String   @default("size-medium")
  globalPastaTypeShowDescription Boolean  @default(true)
  globalPastaTypeFontSize        Int      @default(100)
  globalPastaTypeBackgroundColor String?  // Global background color for pasta types section
  
  // Global display preferences for pasta sauces
  globalPastaSauceShowImage       Boolean  @default(true)
  globalPastaSauceImageSize       String   @default("size-medium")
  globalPastaSauceShowDescription Boolean  @default(true)
  globalPastaSauceFontSize        Int      @default(100)
  globalPastaSauceBackgroundColor String? // Global background color for pasta sauces section
  
  menuItems                 MenuItem[]
  menuSections              MenuSection[]     // Menu sections for organizing items
  pastaTypes                MenuToPastaType[]
  pastaSauces               MenuToPastaSauce[]
  savedMenus                SavedMenu[]       // One menu can have multiple saved versions
}

model MenuSection {
  id        Int        @id @default(autoincrement())
  name      String
  header    String?    // Optional header text for the section
  sectionType String   @default("general") // "general", "pasta", "sauce", "insalatone", "poke"
  backgroundColor String? // Optional background color for the section
  textColor String?   // Optional text color for the section
  position  Int        @default(0) // Position/order of the section in the menu
  menuId    Int
  menu      Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuItems MenuItem[] // Items in this section

  @@unique([menuId, position]) // Ensure unique positions within a menu
}

model MenuItem {
  id              Int          @id @default(autoincrement())
  name            String
  price           Float
  description     String?      // Optional description for the menu item
  position        Int          @default(0) // Position within the section
  imageUrl        String?
  showImage       Boolean      @default(false) // Switch to show/hide image in menu
  menuId          Int
  menu            Menu         @relation(fields: [menuId], references: [id])
  sectionId       Int?         // Optional section reference
  section         MenuSection? @relation(fields: [sectionId], references: [id], onDelete: SetNull)
}

model PastaType {
  id              Int               @id @default(autoincrement())
  name            String
  imageUrl        String?
  description     String?           // Optional description for the pasta type
  basePrice       Float             @default(8.50) // Base price for this pasta type
  priceNote       String?           // Optional note about pricing (e.g., "+€2 for large portion")
  backgroundColor String?           // Optional background color for the pasta type
  textColor       String?           // Optional text color for the pasta type
  menus           MenuToPastaType[]
}

model PastaSauce {
  id              Int                @id @default(autoincrement())
  name            String
  imageUrl        String?
  description     String?            // Optional description for the pasta sauce
  basePrice       Float              @default(3.50) // Base price for this pasta sauce
  priceNote       String?            // Optional note about pricing (e.g., "+€1 for truffle sauce")
  backgroundColor String?            // Optional background color for the pasta sauce
  textColor       String?            // Optional text color for the pasta sauce
  menus           MenuToPastaSauce[]
}


model MenuToPastaType {
  id                 Int       @id @default(autoincrement())
  menu               Menu      @relation(fields: [menuId], references: [id])
  menuId             Int
  pastaType          PastaType @relation(fields: [pastaTypeId], references: [id])
  pastaTypeId        Int
  
  // Display customizations
  showImage          Boolean   @default(true)
  imageSize          String    @default("size-medium") // "size-small", "size-medium", "size-large"
  showDescription    Boolean   @default(true)
  fontSize           Int       @default(100) // Percentage of base font size
  customDescription  String?   // Optional custom description override
  customFontColor    String?   // Optional custom font color
  customBgColor      String?   // Optional custom background color

  @@unique([menuId, pastaTypeId])
}

// Join table for Menu and PastaSauce
model MenuToPastaSauce {
  id                 Int        @id @default(autoincrement())
  menu               Menu       @relation(fields: [menuId], references: [id])
  menuId             Int
  pastaSauce         PastaSauce @relation(fields: [pastaSauceId], references: [id])
  pastaSauceId       Int
  
  // Display customizations
  showImage          Boolean    @default(true)
  imageSize          String     @default("size-medium") // "size-small", "size-medium", "size-large"
  showDescription    Boolean    @default(true)
  fontSize           Int        @default(100) // Percentage of base font size
  customDescription  String?    // Optional custom description override
  customFontColor    String?    // Optional custom font color
  customBgColor      String?    // Optional custom background color

  @@unique([menuId, pastaSauceId])
}

// Saved menu for storing menu snapshots
model SavedMenu {
  id          Int      @id @default(autoincrement())
  name        String
  savedAt     DateTime @default(now())
  menuId      Int
  menu        Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
}

// Background configuration for different pages
model BackgroundConfig {
  id          Int      @id @default(autoincrement())
  page        String?  // e.g., "pasta", "main", "sections" - now optional since menus can have their own
  type        String   @default("color") // "color", "gradient", "image"
  value       String   // CSS background value (gradient, color, image url, etc.)
  background  String?  // Legacy field for backwards compatibility
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  menus       Menu[]   // One background config can be used by multiple menus

  @@unique([page]) // Keep page unique but allow nulls
}

// Slideshow configuration
model Slideshow {
  id          Int             @id @default(autoincrement())
  name        String          @default("Default Slideshow")
  isActive    Boolean         @default(false)
  intervalMs  Int             @default(5000) // 5 seconds default
  autoStart   Boolean         @default(false)
  startTime   String?         // Time to auto-start (e.g., "12:30")
  endTime     String?         // Time to auto-end (e.g., "12:30")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  slides      SlideshowSlide[]
}

model SlideshowSlide {
  id          Int       @id @default(autoincrement())
  imageUrl    String
  title       String?   // Optional title for the slide
  description String?   // Optional description
  position    Int       @default(0) // Order of slides
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  slideshowId Int
  slideshow   Slideshow @relation(fields: [slideshowId], references: [id], onDelete: Cascade)
  
  @@unique([slideshowId, position])
}
