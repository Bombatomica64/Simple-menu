generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Menu {
  id             Int               @id @default(autoincrement())
  createdAt      DateTime          @default(now())
  menuItems      MenuItem[]
  menuSections   MenuSection[]     // Menu sections for organizing items
  pastaTypes     MenuToPastaType[]
  pastaSauces    MenuToPastaSauce[]
  savedMenus     SavedMenu[]       // One menu can have multiple saved versions
}

model MenuSection {
  id        Int        @id @default(autoincrement())
  name      String
  position  Int        @default(0) // Position/order of the section in the menu
  menuId    Int
  menu      Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuItems MenuItem[] // Items in this section

  @@unique([menuId, position]) // Ensure unique positions within a menu
}

model MenuItem {
  id              Int          @id @default(autoincrement())
  name            String
  price           Float
  position        Int          @default(0) // Position within the section
  imageUrl        String?
  availableImages String       @default("[]") // JSON array of image URLs
  showImage       Boolean      @default(false) // Switch to show/hide image in menu
  menuId          Int
  menu            Menu         @relation(fields: [menuId], references: [id])
  sectionId       Int?         // Optional section reference
  section         MenuSection? @relation(fields: [sectionId], references: [id], onDelete: SetNull)
}

model PastaType {
  id              Int               @id @default(autoincrement())
  name            String
  imageUrl        String
  availableImages String            @default("[]") // JSON array of image URLs
  menus           MenuToPastaType[]
}

model PastaSauce {
  id              Int                @id @default(autoincrement())
  name            String
  imageUrl        String
  availableImages String             @default("[]") // JSON array of image URLs
  menus           MenuToPastaSauce[]
}


model MenuToPastaType {
  id          Int       @id @default(autoincrement())
  menu        Menu      @relation(fields: [menuId], references: [id])
  menuId      Int
  pastaType   PastaType @relation(fields: [pastaTypeId], references: [id])
  pastaTypeId Int

  @@unique([menuId, pastaTypeId])
}

// Join table for Menu and PastaSauce
model MenuToPastaSauce {
  id          Int        @id @default(autoincrement())
  menu        Menu       @relation(fields: [menuId], references: [id])
  menuId      Int
  pastaSauce  PastaSauce @relation(fields: [pastaSauceId], references: [id])
  pastaSauceId Int

  @@unique([menuId, pastaSauceId])
}

// Saved menu for storing menu snapshots
model SavedMenu {
  id          Int      @id @default(autoincrement())
  name        String
  savedAt     DateTime @default(now())
  menuId      Int
  menu        Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
}
